class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        int len = words.length;
        String[] reversed = new String[len];
        for(int i =0; i < len; i++) {
            reversed[i] = new StringBuilder(words[i]).reverse().toString();
        }

        List<List<Integer>> pairs = oneWayPalindromePairs(words, reversed, true, false);
        List<List<Integer>> pairs2 = oneWayPalindromePairs(reversed, words, false, true);
        for (List<Integer> pair : pairs2) {
            pairs.add(pair);
        }
        
        return pairs;
    }
    
    List<List<Integer>> oneWayPalindromePairs(String[] words, String[] reversed, boolean allowSameLength, boolean isReversed) {
        List<List<Boolean>> allSelfPalindromeIndices = getAllSelfPalindromeIndices(words);
        TrieNode trie = new TrieNode('\0');
        
        // add all words to trie, reversed
        for (int i = 0; i < reversed.length; i++) {
            trie.addToChild(reversed[i], i);
        }
        
        // match
        List<List<Integer>> pairs = new ArrayList<>();
        for(int i = 0; i < words.length; i++) {
            String word = words[i];
            
            // handle empty string case
            if (word.length() == 0) {
                if (isReversed) {
                    continue;
                }
                for(int j=0;j<words.length;j++){
                    if (i == j) {
                        continue;
                    }
                    List<Boolean> sp = allSelfPalindromeIndices.get(j);
                    if (sp.get(0)) {
                        List<Integer> pair = new ArrayList<>(2);
                        pair.add(i);
                        pair.add(j);
                        pairs.add(pair);
                        pair = new ArrayList<>(2);
                        pair.add(j);
                        pair.add(i);
                        pairs.add(pair);
                    }
                }
                continue;
            }
            
            TrieNode node = trie;
            int len = word.length();
            List<Boolean> selfPalindromeIndices = allSelfPalindromeIndices.get(i);
            for (int j = 0; j < len; j++) {
                char ch = word.charAt(j);
                node = node.getChild(ch);
                if (node == null) {
                    break;
                }
                int wordIndex = node.getWordIndex();
                if (wordIndex >= 0 && wordIndex != i) {
                    // found a word matches prefix
                    if (j == len - 1 || selfPalindromeIndices.get(j+1)) {
                        // bingo
                        
                        if (!allowSameLength && len == words[wordIndex].length()) {
                            continue;
                        }
                        
                        List<Integer> pair = new ArrayList<>(2);
                        if (isReversed) {
                            pair.add(wordIndex);
                            pair.add(i);
                        } else {
                            pair.add(i);
                            pair.add(wordIndex);                            
                        }
                        pairs.add(pair);
                    }
                }
            }
        }
        return pairs;
    }
    
    List<List<Boolean>> getAllSelfPalindromeIndices(String[] words) {
        List<List<Boolean>> all = new ArrayList<>(words.length);
        for (String word : words) {
            all.add(getSelfPalindromeIndices(word));
        }
        return all;
    }
    
    List<Boolean> getSelfPalindromeIndices(String word) {
        List<Boolean> states = new ArrayList<>(word.length());
        for(int i = 0; i< word.length(); i++) {
            states.add(isPalindrome(word, i));
        }
        return states;
    }
    
    Boolean isPalindrome(String word, int start) {
        int i = start;
        int j = word.length() - 1;
        for(; i <= j; i++, j--) {
            if (word.charAt(i) != word.charAt(j)) {
                return false;
            }
        }
        return true;
    }
}

class TrieNode{
    char c;
    int wordIndex; // -1 indicates no match
    Map<Character, TrieNode> children;
    
    public TrieNode(char ch) {
        children = new HashMap<>();
        c = ch;
        wordIndex = -1;
    }
    
    public void addToChild(CharSequence chars, int wordIndex) {
        if (chars.length() == 0) {
            this.wordIndex = wordIndex;
            return;
        } 
        char ch = chars.charAt(0);
        TrieNode t = children.get(ch);
        if (t == null) {
            t = new TrieNode(ch);
            children.put(ch, t);
        }
        t.addToChild(chars.subSequence(1, chars.length()), wordIndex);
    }
    
    public int getWordIndex() {
        return wordIndex;
    }
    
    public char getChar() {
        return c;
    }
    
    public TrieNode getChild(char ch) {
        return children.get(ch);
    }
}
